import socket
import json
import time

def safe_insert_json(widget, data):
    try:
        if widget.winfo_exists():
            widget.insert("end", json.dumps(data) + "\n")
            widget.see("end")
    except Exception as e:
        print(f"[App] ‚ö†Ô∏è safe_insert_json l·ªói: {e}")

def start_lidar_receiver(running_flag, callbacks=None, get_text_widget=None, port=8899):
    """
    Ch·ªâ nh·∫≠n d·ªØ li·ªáu LiDAR th√¥ t·ª´ Pi4, g·ª≠i cho c√°c callback trong callbacks (list).
    Kh√¥ng x·ª≠ l√Ω n·ªôi dung, kh√¥ng l∆∞u v√†o bi·∫øn th√†nh vi√™n c·ªßa b·∫•t k·ª≥ class n√†o.
    """
    if callbacks is None:
        callbacks = []
    if not isinstance(callbacks, list):
        callbacks = [callbacks]    
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind(('0.0.0.0', port))
    server.listen(1)
    print(f"[App] üì° ƒêang ch·ªù d·ªØ li·ªáu LiDAR t·ª´ Pi4 t·∫°i c·ªïng {port}...")

    last_data_time = 0
    receiving = False
    NOTIFY_INTERVAL = 2.0

    while running_flag.is_set():
        try:
            conn, addr = server.accept()
            print(f"[App] ‚úÖ K·∫øt n·ªëi Pi4: {addr}")
            with conn:
                buffer = ""
                while running_flag.is_set():
                    try:
                        chunk = conn.recv(4096).decode()
                        if not chunk:
                            break
                        buffer += chunk
                        while '\n' in buffer:
                            line, buffer = buffer.split('\n', 1)
                            line = line.strip()
                            if not line:
                                continue
                            if line == "PING":
                                conn.sendall(b"PONG\n")
                                continue
                            try:
                                parsed = json.loads(line)
                                last_data_time = time.time()
                                if not receiving:
                                    print("üü¢ ƒêang nh·∫≠n d·ªØ li·ªáu LiDAR...")
                                    receiving = True

                                # G·ª≠i cho to√†n b·ªô callback
                                for cb in callbacks:
                                    if callable(cb):
                                        try:
                                            #print(f"[App] G·ªçi callback: {cb}")
                                            cb(parsed)
                                        except Exception as e:
                                            print(f"[App] ‚ö†Ô∏è Callback l·ªói: {e}")

                                # N·∫øu mu·ªën log text ra 1 widget n√†o ƒë√≥:
                                if get_text_widget:
                                    text_widget = get_text_widget()
                                    if text_widget and text_widget.winfo_exists():
                                        text_widget.after(0, lambda: safe_insert_json(text_widget, parsed))
                            except json.JSONDecodeError:
                                print("[App] ‚ùå Kh√¥ng ph·∫£i JSON:", line)
                    except Exception as e:
                        print("[App] ‚ö†Ô∏è L·ªói nh·∫≠n d·ªØ li·ªáu:", e)
                        break
                    if time.time() - last_data_time > NOTIFY_INTERVAL and receiving:
                        print("üî¥ Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu LiDAR!")
                        receiving = False
        except Exception as e:
            print("[App] ‚ö†Ô∏è L·ªói k·∫øt n·ªëi Pi4:", e)
    server.close()
