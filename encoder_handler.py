from gpiozero import DigitalInputDevice
import threading
import math
import time

# === C·∫§U H√åNH ENCODER ===
ENCODERS = {
    'E1': {'A': 20, 'B': 21},  # Tr√°i tr∆∞·ªõc
    'E2': {'A': 5,  'B': 6},   # Tr√°i sau
    'E4': {'A': 18, 'B': 12},  # Ph·∫£i tr∆∞·ªõc
    'E3': {'A': 24, 'B': 23}   # Ph·∫£i sau
}

positions = {key: 0 for key in ENCODERS}
encoders = {}
lock = threading.Lock()

# === TH√îNG S·ªê ROBOT ===
CPR = 171               # Counts Per Revolution
WHEEL_RADIUS = 0.03     # m√©t
WHEEL_DISTANCE = 0.23   # m√©t gi·ªØa b√°nh tr√°i v√† ph·∫£i

# === V·ªä TR√ç ROBOT ===
robot_x = 0.0
robot_y = 0.0
robot_theta = 0.0  # radian
last_positions = positions.copy()

# === CALLBACK ƒê·ªåC CHI·ªÄU QUAY D·ª∞A TR√äN A & B ===
def make_callback(key):
    def callback():
        A = encoders[key]['A'].value
        B = encoders[key]['B'].value
        with lock:
            if A == B:
                positions[key] += 1
            else:
                positions[key] -= 1
    return callback

# === KH·ªûI T·∫†O ENCODERS ===
def init_encoders():
    for key, pins in ENCODERS.items():
        encoders[key] = {
            'A': DigitalInputDevice(pins['A']),
            'B': DigitalInputDevice(pins['B'])
        }
        encoders[key]['A'].when_activated = make_callback(key)
        encoders[key]['A'].when_deactivated = make_callback(key)

# === D·ªåN D·∫∏P ENCODER ===
def cleanup_encoders():
    for enc in encoders.values():
        enc['A'].close()
        enc['B'].close()

# === TR·∫¢ V·ªÄ V·ªä TR√ç ROBOT (x, y, g√≥c theta) ===
def get_robot_pose():
    global robot_x, robot_y, robot_theta, last_positions

    with lock:
        # === T√≠nh gi√° tr·ªã trung b√¨nh m·ªói b√™n ===
        left_now = (positions['E1'] + positions['E2']) / 2
        right_now = (positions['E4'] + positions['E3']) / 2

        left_last = (last_positions['E1'] + last_positions['E2']) / 2
        right_last = (last_positions['E4'] + last_positions['E3']) / 2

        d_left = (left_now - left_last) * (2 * math.pi * WHEEL_RADIUS) / CPR
        d_right = (right_now - right_last) * (2 * math.pi * WHEEL_RADIUS) / CPR

        last_positions = positions.copy()

    d_center = (d_left + d_right) / 2
    delta_theta = (d_right - d_left) / WHEEL_DISTANCE

    robot_theta += delta_theta
    robot_theta = (robot_theta + math.pi) % (2 * math.pi) - math.pi

    dx = d_center * math.cos(robot_theta)
    dy = d_center * math.sin(robot_theta)

    robot_x += dx
    robot_y += dy

    # üëâ Tr·∫£ v·ªÅ th√™m trung b√¨nh encoder m·ªói b√™n
    return (robot_x, robot_y, robot_theta, left_now, right_now)


if __name__ == "__main__":
    try:
        init_encoders()
        print("[TEST] ƒêang ƒë·ªçc d·ªØ li·ªáu encoder... Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.")
        while True:
            x, y, theta, left_avg, right_avg = get_robot_pose()
            print(f"[ODO] x={x:.2f} m | y={y:.2f} m | g√≥c={math.degrees(theta):.1f}¬∞")
            print(f"      ‚û§ Trung b√¨nh b√™n tr√°i: {left_avg:.1f} counts | b√™n ph·∫£i: {right_avg:.1f} counts\n")
            time.sleep(0.2)
    except KeyboardInterrupt:
        print("\n[TEST] D·ª´ng l·∫°i.")
    finally:
        cleanup_encoders()

